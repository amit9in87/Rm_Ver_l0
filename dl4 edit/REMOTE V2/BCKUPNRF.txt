/**
  ******************************************************************************
  * File Name          : main.c
  * Description        : Main program body
  ******************************************************************************
  *
  * COPYRIGHT(c) 2016 STMicroelectronics
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:
  *   1. Redistributions of source code must retain the above copyright notice,
  *      this list of conditions and the following disclaimer.
  *   2. Redistributions in binary form must reproduce the above copyright notice,
  *      this list of conditions and the following disclaimer in the documentation
  *      and/or other materials provided with the distribution.
  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  *      may be used to endorse or promote products derived from this software
  *      without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  ******************************************************************************
  */
/* Includes ------------------------------------------------------------------*/
#include "stm32f0xx_hal.h"

/* USER CODE BEGIN Includes */
#include "stdio.h"
#include "stdlib.h"
#include "nRF24L01.h"


#define LATs 		HAL_GPIO_WritePin(USER_LATCH_GPIO_Port, USER_LATCH_Pin, GPIO_PIN_SET)
#define LATc 		HAL_GPIO_WritePin(USER_LATCH_GPIO_Port, USER_LATCH_Pin, GPIO_PIN_RESET)

#define SCLKs   HAL_GPIO_WritePin(LED_SCLK_GPIO_Port, LED_SCLK_Pin, GPIO_PIN_SET)
#define SCLKc   HAL_GPIO_WritePin(LED_SCLK_GPIO_Port, LED_SCLK_Pin, GPIO_PIN_RESET)

#define SINs    HAL_GPIO_WritePin(LED_SIN_GPIO_Port, LED_SIN_Pin, GPIO_PIN_SET)
#define SINc    HAL_GPIO_WritePin(LED_SIN_GPIO_Port, LED_SIN_Pin, GPIO_PIN_RESET)

#define BLANKs  HAL_GPIO_WritePin(LED_SBLANK_GPIO_Port, LED_SBLANK_Pin, GPIO_PIN_SET)
#define BLANKc  HAL_GPIO_WritePin(LED_SBLANK_GPIO_Port, LED_SBLANK_Pin, GPIO_PIN_RESET)

#define SPI_CS_LOW       HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET)
#define SPI_CS_HIGH      HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_SET)

/* Chip Enable macro definition */
#define SPI_CE_LOW       HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET)
#define SPI_CE_HIGH      HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET)


#define TX_POWERUP nrfwritereg(CONFIG, nrf_CONFIG | ( (1<<PWR_UP) | (0<<PRIM_RX) ) )
#define RX_POWERUP nrfwritereg(CONFIG, nrf_CONFIG | ( (1<<PWR_UP) | (1<<PRIM_RX) ) )



#define STM32_UUID ((uint32_t *)0x1FFFF7AC) // 3 byte uid AC, B0 & B4

/* USER CODE END Includes */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;

RTC_HandleTypeDef hrtc;

SPI_HandleTypeDef hspi1;

TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
/* Private variables ---------------------------------------------------------*/
uint8_t nrf_CONFIG;
uint8_t status;

uint8_t nrfreg[32];
uint8_t nrfrxb[32];
uint8_t nrftxb[32];






/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void Error_Handler(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_SPI1_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_RTC_Init(void);
static void MX_TIM6_Init(void);
static void MX_TIM7_Init(void);

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/

void nrfinit(uint8_t ch, uint8_t mode);

void nrfwritereg(uint8_t regname, uint8_t value);
uint8_t nrfreadreg(uint8_t regname);

void nrfrxaddr(uint8_t pipe, uint8_t payload, uint32_t addr);
void nrftxaddr(uint8_t pipe, uint32_t addr);

void nrfloadtx(uint8_t buff[32]);
void nrfgetrx(uint8_t buff[32]);
uint8_t nrftranschk(void);

void nrfregister(void);



/* USER CODE END PFP */

/* USER CODE BEGIN 0 */

void leddata(uint64_t value)
{
	SINc;	SCLKc;	LATc;	BLANKc;	
	
	LATs;	LATc;
	
	SCLKs;	SCLKc;
	
	if(value&&0x01)
	{
	  
	}	



}

void micro_delay(uint32_t delay)
{
  uint32_t ticks = 0;
  while(ticks < delay)
  {
		ticks++;
  }
}


/* USER CODE END 0 */

int main(void)
{

  /* USER CODE BEGIN 1 */

	uint8_t buffer = 'a';
	uint32_t uid, gcall;

	uid = *STM32_UUID;
	gcall = 0x07091987;
	
	
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* Configure the system clock */
  SystemClock_Config();

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_I2C1_Init();
  MX_SPI1_Init();
  MX_USART2_UART_Init();
  MX_RTC_Init();
  MX_TIM6_Init();
  MX_TIM7_Init();

  /* USER CODE BEGIN 2 */
	SINc;
	HAL_Delay(1000);

  nrfreadreg(0x00); // default read function necessary
 	HAL_Delay(1000);

  nrfregister();
  HAL_UART_Transmit(&huart2, nrfreg, 32, 3000);

	nrfinit(22, 0); // 2 for ch, 0 for tx mode, 
	nrfwritereg(SETUP_RETR, 0xF0);
	nrfwritereg(RF_SETUP, 0x20);
	
	nrfwritereg(EN_RXADDR, 0x3f);
	
	nrfwritereg(SETUP_AW, 0x03);

	nrfrxaddr(RX_ADDR_P0, 32, gcall); // 32 for payload
//	nrfrxaddr(RX_ADDR_P1, 32, uid); // 
	nrftxaddr(TX_ADDR, gcall); // 


  TX_POWERUP;	

	 nrftxb[0] = 0x01;
	 nrftxb[1] = 0x02;
	 nrftxb[2] = 0x03;
	
	  nrfregister();
  HAL_UART_Transmit(&huart2, nrfreg, 32, 3000);

	
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  /* USER CODE END WHILE */

//		HAL_GPIO_TogglePin(GEN_M_GPIO_Port, GEN_M_Pin);
//		HAL_GPIO_TogglePin(GEN_F_GPIO_Port, GEN_F_Pin);
		
//		HAL_UART_Transmit(&huart2, &buffer, 1, 1000);
		
		
		
  /* USER CODE BEGIN 3 */

  }
  /* USER CODE END 3 */

}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
}

/* I2C1 init function */
static void MX_I2C1_Init(void)
{

  hi2c1.Instance = I2C1;
  hi2c1.Init.Timing = 0x2000090E;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }

    /**Configure Analogue filter 
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
  {
    Error_Handler();
  }

}

/* RTC init function */
static void MX_RTC_Init(void)
{

  RTC_TimeTypeDef sTime;
  RTC_DateTypeDef sDate;

    /**Initialize RTC and set the Time and Date 
    */
  hrtc.Instance = RTC;
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = 127;
  hrtc.Init.SynchPrediv = 255;
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
  {
    Error_Handler();
  }

  sTime.Hours = 0x0;
  sTime.Minutes = 0x0;
  sTime.Seconds = 0x0;
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
  {
    Error_Handler();
  }

  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
  sDate.Month = RTC_MONTH_JANUARY;
  sDate.Date = 0x1;
  sDate.Year = 0x0;

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
  {
    Error_Handler();
  }

    /**Enable the WakeUp 
    */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
  {
    Error_Handler();
  }

}

/* SPI1 init function */
static void MX_SPI1_Init(void)
{

  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }

}

/* TIM6 init function */
static void MX_TIM6_Init(void)
{

  htim6.Instance = TIM6;
  htim6.Init.Prescaler = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.Period = 0;
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
  {
    Error_Handler();
  }

}

/* TIM7 init function */
static void MX_TIM7_Init(void)
{

  htim7.Instance = TIM7;
  htim7.Init.Prescaler = 0;
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim7.Init.Period = 0;
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
  {
    Error_Handler();
  }

}

/* USART2 init function */
static void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 9600;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }

}

/** Configure pins as 
        * Analog 
        * Input 
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GEN_M_Pin|GEN_F_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NRF_CSN_Pin|NRF_CE_Pin|ACC_CS_Pin|BUZZER_Pin 
                          |LED_SBLANK_Pin|USER_LATCH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_SCLK_Pin|LED_SIN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : GEN_M_Pin GEN_F_Pin */
  GPIO_InitStruct.Pin = GEN_M_Pin|GEN_F_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : NRF_CSN_Pin NRF_CE_Pin ACC_CS_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = NRF_CSN_Pin|NRF_CE_Pin|ACC_CS_Pin|BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : KP_COL1_Pin KP_COL2_Pin KP_COL3_Pin KP_ROW4_Pin 
                           NRF_IRQ_Pin KP_COL4_Pin KP_COL5_Pin KP_COL6_Pin 
                           KP_COL7_Pin KP_ROW1_Pin KP_ROW2_Pin KP_ROW3_Pin */
  GPIO_InitStruct.Pin = KP_COL1_Pin|KP_COL2_Pin|KP_COL3_Pin|KP_ROW4_Pin 
                          |NRF_IRQ_Pin|KP_COL4_Pin|KP_COL5_Pin|KP_COL6_Pin 
                          |KP_COL7_Pin|KP_ROW1_Pin|KP_ROW2_Pin|KP_ROW3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : ACC_INT1_Pin ACC_INT2_Pin */
  GPIO_InitStruct.Pin = ACC_INT1_Pin|ACC_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : LED_SCLK_Pin LED_SIN_Pin */
  GPIO_InitStruct.Pin = LED_SCLK_Pin|LED_SIN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : LED_SOUT_Pin */
  GPIO_InitStruct.Pin = LED_SOUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(LED_SOUT_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : LED_SBLANK_Pin USER_LATCH_Pin */
  GPIO_InitStruct.Pin = LED_SBLANK_Pin|USER_LATCH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 0);
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);

}

/* USER CODE BEGIN 4 */

void nrfinit(uint8_t ch, uint8_t mode)
{ 
	nrf_CONFIG = (mode<<PRIM_RX) | (1<<EN_CRC) | (0<<CRCO); // 1 for PRX & 0 for PTX
	nrfwritereg(RF_CH, (ch&0x7e)); // Max 7 bit 
	nrfwritereg(CONFIG, nrf_CONFIG); 
	nrfwritereg(FLUSH_TX, 0x00);
	nrfwritereg(FLUSH_RX, 0x00);
}
void nrfwritereg(uint8_t regname, uint8_t value)
{
	regname = (0x20|regname);
	SPI_CS_LOW;
  HAL_SPI_Transmit(&hspi1, &regname, 1, 3000);
  HAL_SPI_Transmit(&hspi1, &value, 1, 3000);
  SPI_CS_HIGH;
}

uint8_t nrfreadreg(uint8_t regname)
{
	uint8_t value;
	SPI_CS_LOW;
  HAL_SPI_Transmit(&hspi1, &regname, 1, 3000);
  HAL_SPI_Receive(&hspi1, &value, 1, 3000);
  SPI_CS_HIGH;
  return value;
}

void nrfregister(void)
{
  for(int i=0; i<32; i++)
	 nrfreg[i] = nrfreadreg(i);
}	

void nrfrxaddr(uint8_t pipe, uint8_t payload, uint32_t addr)
{
	uint8_t adr[4];
	nrfwritereg(pipe, payload); // Max 32 bytes
	adr[0] = addr; adr[1] = addr>>8;
	adr[2] = addr>>16; adr[3] = addr>>24;
  pipe = (0x20|pipe);
	SPI_CS_LOW;
  HAL_SPI_Transmit(&hspi1, &pipe, 1, 3000);
	for(int j =0; j<4; j++)
   HAL_SPI_Transmit(&hspi1, &adr[j], 1, 3000);
  SPI_CS_HIGH;
}

void nrftxaddr(uint8_t pipe, uint32_t addr)
{
	uint8_t adr[4];
	adr[0] = addr; adr[1] = addr>>8;
	adr[2] = addr>>16; adr[3] = addr>>24;
  pipe = (0x20|pipe);
	SPI_CS_LOW;
  HAL_SPI_Transmit(&hspi1, &pipe, 1, 3000);
	for(int j =0; j<4; j++)
   HAL_SPI_Transmit(&hspi1, &adr[j], 1, 3000);
  SPI_CS_HIGH;
}
void nrfloadtx(uint8_t buff[32])
{
  uint8_t cmd;
	cmd = W_TX_PAYLOAD;
	nrfwritereg(FLUSH_TX, 0x00);
	SPI_CS_LOW;
  HAL_SPI_Transmit(&hspi1, &cmd, 1, 3000);		
	for(int i=0; i<32; i++)
   HAL_SPI_Transmit(&hspi1, &buff[i], 1, 3000);
  SPI_CS_HIGH;
}

uint8_t nrftranschk(void)
{
	do
		{
	    SPI_CE_HIGH;
      HAL_Delay(1);				
      nrfwritereg(NOP, 0x00);					
			SPI_CE_LOW;
			HAL_Delay(1);					
			nrfwritereg(STATUS, 0x1e);
		}	
	 while(0x11!=nrfreadreg(FIFO_STATUS)); // repeat unless 0x11 is received
		return 0;
}	
void nrfgetrx(uint8_t buff[32])
{ 
  uint8_t cmd;
	cmd = R_RX_PAYLOAD;
	SPI_CS_LOW;
  HAL_SPI_Transmit(&hspi1, &cmd, 1, 3000);		
	for(int i=0; i<32; i++)
   HAL_SPI_Receive(&hspi1, &buff[i], 1, 3000);
  SPI_CS_HIGH;
}	



/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
  {
  }
  /* USER CODE END Error_Handler */ 
}

#ifdef USE_FULL_ASSERT

/**
   * @brief Reports the name of the source file and the source line number
   * where the assert_param error has occurred.
   * @param file: pointer to the source file name
   * @param line: assert_param error line source number
   * @retval None
   */
void assert_failed(uint8_t* file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
    ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */

}

#endif

/**
  * @}
  */ 

/**
  * @}
*/ 

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
